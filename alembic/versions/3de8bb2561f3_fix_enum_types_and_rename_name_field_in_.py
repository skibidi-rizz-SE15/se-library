"""Fix enum types and rename name field in User to username

Revision ID: 3de8bb2561f3
Revises: 5f101ee486b1
Create Date: 2025-02-27 16:54:51.612438

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlmodel

# revision identifiers, used by Alembic.
revision: str = '3de8bb2561f3'
down_revision: Union[str, None] = '5f101ee486b1'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('book', schema=None) as batch_op:
        batch_op.add_column(sa.Column('genre', sa.Enum('PROGRAMMING_LANGUAGES', 'DESIGN_PATTERNS', 'SOFTWARE_ARCHITECTURE', 'DEVOPS', 'SOFTWARE_TESTING', 'PROJECT_MANAGEMENT', 'USER_EXPERIENCE', 'SECURITY', name='genre_enum', create_constraint=True), nullable=True))

    with op.batch_alter_table('bookinventory', schema=None) as batch_op:
        batch_op.alter_column('condition',
               existing_type=postgresql.ENUM('FACTORY_NEW', 'MINIMAL_WEAR', 'FIELD_TESTED', 'WELL_WORN', 'BATTLE_SCARRED', name='conditionenum'),
               nullable=True)
        batch_op.alter_column('availability',
               existing_type=postgresql.ENUM('AVAILABLE', 'UNAVAILABLE', 'RESERVED', name='availabilityenum'),
               nullable=True)

    with op.batch_alter_table('booktransaction', schema=None) as batch_op:
        batch_op.alter_column('borrow_status',
               existing_type=postgresql.ENUM('PENDING', 'APPROVED', 'REJECTED', 'BORROWED', 'RETURNED', name='borrowstatusenum'),
               nullable=True)

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
        batch_op.drop_constraint('user_name_key', type_='unique')
        batch_op.create_unique_constraint(None, ['username'])
        batch_op.drop_column('name')

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='unique')
        batch_op.create_unique_constraint('user_name_key', ['name'])
        batch_op.drop_column('username')

    with op.batch_alter_table('booktransaction', schema=None) as batch_op:
        batch_op.alter_column('borrow_status',
               existing_type=postgresql.ENUM('PENDING', 'APPROVED', 'REJECTED', 'BORROWED', 'RETURNED', name='borrowstatusenum'),
               nullable=False)

    with op.batch_alter_table('bookinventory', schema=None) as batch_op:
        batch_op.alter_column('availability',
               existing_type=postgresql.ENUM('AVAILABLE', 'UNAVAILABLE', 'RESERVED', name='availabilityenum'),
               nullable=False)
        batch_op.alter_column('condition',
               existing_type=postgresql.ENUM('FACTORY_NEW', 'MINIMAL_WEAR', 'FIELD_TESTED', 'WELL_WORN', 'BATTLE_SCARRED', name='conditionenum'),
               nullable=False)

    with op.batch_alter_table('book', schema=None) as batch_op:
        batch_op.drop_column('genre')

    # ### end Alembic commands ###
